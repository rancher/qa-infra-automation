---
- name: RKE2 Upgrade Readiness Validation
  hosts: all
  gather_facts: true
  vars_files:
    - ../group_vars/all.yml
  tasks:
    - name: Set validation timestamp
      ansible.builtin.set_fact:
        validation_time: "{{ ansible_date_time.iso8601 }}"

- name: Validate Bastion Host Readiness
  hosts: bastion
  become: true
  gather_facts: true
  vars_files:
    - ../group_vars/all.yml
  vars:
    target_group: "{{ target | default('rancher') }}"
  tasks:
    - name: Check internet connectivity
      ansible.builtin.uri:
        url: https://github.com/rancher/rke2/releases
        method: GET
        timeout: 10
      register: internet_check
      failed_when: false

    - name: Check disk space on bastion
      ansible.builtin.shell: |
        set -o pipefail
        df -h /opt | tail -1 | awk '{print $4}'
      register: bastion_disk_space
      changed_when: false

    - name: Validate SSH connectivity to airgap nodes
      ansible.builtin.shell: |
        ssh -i {{ ssh_private_key_file }} -o ConnectTimeout=5 -o StrictHostKeyChecking=no \
        {{ ansible_user }}@{{ hostvars[item]['ansible_host'] }} "echo 'SSH OK'"
      register: ssh_test
      failed_when: false
      loop: "{{ groups[target_group] }}"
      changed_when: false

    - name: Display bastion validation results
      ansible.builtin.debug:
        msg: |
          Bastion Host Validation:
          [INFO] Internet Access: {{ 'OK' if internet_check.status == 200 else 'FAILED' }}
          [INFO] Disk Space: {{ bastion_disk_space.stdout }}
          [INFO] SSH Connectivity: {{ ssh_test.results | selectattr('rc', 'equalto', 0) | list | length }}/{{ groups[target_group] | length }} nodes reachable

- name: Validate Airgap Nodes Readiness
  hosts: airgap_nodes
  become: true
  gather_facts: true
  vars_files:
    - ../group_vars/all.yml
  tasks:
    - name: Check if RKE2 is installed
      ansible.builtin.stat:
        path: /usr/local/bin/rke2
      register: rke2_binary

    - name: Get current RKE2 version
      ansible.builtin.shell: |
        set -o pipefail
        /usr/local/bin/rke2 --version | head -1 | awk '{print $3}'
      register: current_rke2_version
      when: rke2_binary.stat.exists
      changed_when: false

    - name: Check RKE2 service status
      ansible.builtin.systemd:
        name: "{{ 'rke2-server' if inventory_hostname == groups[target_group][0] else 'rke2-agent' }}"
      register: rke2_service_status
      when: rke2_binary.stat.exists

    - name: Check disk space
      ansible.builtin.shell: |
        set -o pipefail
        df -h /var/lib/rancher | tail -1
      register: node_disk_info
      changed_when: false

    - name: Extract disk usage percentage
      ansible.builtin.set_fact:
        disk_usage_percent: "{{ node_disk_info.stdout.split()[4] | regex_replace('%', '') | int }}"
        disk_available: "{{ node_disk_info.stdout.split()[3] }}"

    - name: Check memory usage
      ansible.builtin.shell: |
        set -o pipefail
        free -h | grep Mem | awk '{print $3 "/" $2 " (" int($3/$2*100) "%)"}'
      register: memory_usage
      changed_when: false

    - name: Check system load
      ansible.builtin.shell: |
        set -o pipefail
        uptime | awk -F'load average:' '{print $2}'
      register: system_load
      changed_when: false

    - name: Check for running pods (server nodes only)
      ansible.builtin.shell: |
        set -o pipefail
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        /var/lib/rancher/rke2/bin/kubectl get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded | wc -l
      register: non_running_pods
      when:
        - rke2_binary.stat.exists
        - inventory_hostname == groups[target_group][0]
      changed_when: false
      failed_when: false

    - name: Display node validation results
      ansible.builtin.debug:
        msg: |
          Node Validation for {{ inventory_hostname }}:
          [INFO] RKE2 Installed: {{ 'YES' if rke2_binary.stat.exists else 'NO' }}
          {% if rke2_binary.stat.exists %}
          [INFO] Current Version: {{ current_rke2_version.stdout }}
          [INFO] Target Version: {{ rke2_version | default('undefined') }}
          [INFO] Upgrade Needed: {{ 'YES' if current_rke2_version.stdout != (rke2_version | default('undefined')) else 'NO' }}
          [INFO] Service Status: {{ rke2_service_status.status.ActiveState | default('unknown') }}
          {% endif %}
          [INFO] Disk Usage: {{ disk_usage_percent }}% ({{ disk_available }} available)
          [INFO] Memory Usage: {{ memory_usage.stdout }}
          [INFO] System Load: {{ system_load.stdout.strip() }}
          {% if non_running_pods is defined and non_running_pods.rc is defined and non_running_pods.rc == 0 %}
          [INFO] Non-running Pods: {{ non_running_pods.stdout | int - 1 }}
          {% endif %}

- name: Generate Upgrade Readiness Report
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../group_vars/all.yml
  tasks:
    - name: Collect validation data
      ansible.builtin.set_fact:
        validation_summary:
          timestamp: "{{ hostvars[groups['bastion'][0]]['validation_time'] }}"
          bastion:
            internet_access: "{{ hostvars[groups['bastion'][0]]['internet_check']['status'] == 200 }}"
            disk_space: "{{ hostvars[groups['bastion'][0]]['bastion_disk_space']['stdout'] }}"
            ssh_connectivity: >-
              {{ hostvars[groups['bastion'][0]]['ssh_test']['results'] |
              selectattr('rc', 'equalto', 0) | list | length }}
          nodes: >-
            {{ groups[target_group] | map('extract', hostvars) | list }}

    - name: Count nodes with RKE2 installed
      ansible.builtin.set_fact:
        nodes_with_rke2: >-
          {{ groups[target_group] | select('in', hostvars) | map('extract', hostvars) |
          selectattr('rke2_binary', 'defined') | selectattr('rke2_binary.stat.exists') | list | length }}

    - name: Count services running
      ansible.builtin.set_fact:
        services_running: >-
          {{ groups[target_group] | select('in', hostvars) | map('extract', hostvars) |
          selectattr('rke2_service_status', 'defined') |
          selectattr('rke2_service_status.status.ActiveState', 'equalto', 'active') | list | length }}

    - name: Count nodes with sufficient disk space
      ansible.builtin.set_fact:
        nodes_with_space: >-
          {{ groups[target_group] | select('in', hostvars) | map('extract', hostvars) |
          selectattr('disk_usage_percent', 'defined') | map(attribute='disk_usage_percent') |
          map('int') | select('lessthan', 80) | list | length }}

    - name: Calculate upgrade readiness score
      ansible.builtin.set_fact:
        readiness_checks:
          - name: "Bastion Internet Access"
            status: "{{ validation_summary.bastion.internet_access }}"
            weight: 20
          - name: "SSH Connectivity"
            status: "{{ validation_summary.bastion.ssh_connectivity == groups[target_group] | length }}"
            weight: 15
          - name: "All Nodes Have RKE2"
            status: "{{ nodes_with_rke2 | default(0) == groups[target_group] | length }}"
            weight: 25
          - name: "All Services Running"
            status: "{{ services_running | default(0) == groups[target_group] | length }}"
            weight: 20
          - name: "Sufficient Disk Space"
            status: "{{ nodes_with_space | default(0) == groups[target_group] | length }}"
            weight: 20

    - name: Calculate total readiness score
      ansible.builtin.set_fact:
        total_score: >-
          {{ readiness_checks | selectattr('status') | map(attribute='weight') | sum | int }}
        max_score: >-
          {{ readiness_checks | map(attribute='weight') | sum | int }}

    - name: Generate detailed readiness report
      ansible.builtin.debug:
        msg: |

          ╔══════════════════════════════════════════════════════════════════════════════════════╗
          ║                           RKE2 UPGRADE READINESS REPORT                             ║
          ╠══════════════════════════════════════════════════════════════════════════════════════╣
          ║ Validation Time: {{ validation_summary.timestamp }}                                          ║
          ║ Target RKE2 Version: {{ rke2_version | default('undefined') }}                                                      ║
          ║ Readiness Score: {{ total_score }}/{{ max_score }} ({{ (total_score | int / max_score | int * 100) | round(1) }}%)                                    ║
          ╠══════════════════════════════════════════════════════════════════════════════════════╣
          ║ READINESS CHECKS:                                                                    ║
          {% for check in readiness_checks %}
          ║ {{ '✅' if check.status else '❌' }} {{ check.name }} ({{ check.weight }}pts)                                    ║
          {% endfor %}
          ╠══════════════════════════════════════════════════════════════════════════════════════╣
          ║ BASTION HOST STATUS:                                                                 ║
          ║ • Internet Access: {{ '✅ Available' if validation_summary.bastion.internet_access else '❌ Not Available' }}                                    ║
          ║ • Disk Space: {{ validation_summary.bastion.disk_space }}                                                    ║
          ║ • SSH Connectivity: {{ validation_summary.bastion.ssh_connectivity }}/{{ groups[target_group] | length }} nodes reachable                           ║
          ╠══════════════════════════════════════════════════════════════════════════════════════╣
          ║ CLUSTER NODES STATUS:                                                                ║
          {% for node in groups[target_group] %}
          ║ {{ node }}:                                                                          ║
          ║   • RKE2 Installed: {{ '✅' if (hostvars[node]['rke2_binary'] is defined and hostvars[node]['rke2_binary']['stat']['exists']) else '❌' }}                                                ║
          {% if hostvars[node]['rke2_binary'] is defined and hostvars[node]['rke2_binary']['stat']['exists'] %}
          ║   • Current Version: {{ hostvars[node]['current_rke2_version']['stdout'] | default('unknown') }}                                    ║
          ║   • Service Status: {{ hostvars[node]['rke2_service_status']['status']['ActiveState'] | default('unknown') }}                                     ║
          {% endif %}
          ║   • Disk Usage: {{ hostvars[node]['disk_usage_percent'] | default('unknown') }}% ({{ hostvars[node]['disk_available'] | default('unknown') }} free)                        ║
          ║   • Memory Usage: {{ hostvars[node]['memory_usage']['stdout'] | default('unknown') }}                                              ║
          {% endfor %}
          ╠══════════════════════════════════════════════════════════════════════════════════════╣
          ║ RECOMMENDATIONS:                                                                     ║
          {% if total_score | int == max_score | int %}
          ║ ✅ All checks passed! Cluster is ready for upgrade.                                 ║
          ║ ✅ You can proceed with: ansible-playbook playbooks/rke2-upgrade-playbook.yml      ║
          {% elif total_score | int >= (max_score | int * 0.8) %}
          ║ ⚠️  Most checks passed. Review failed checks before proceeding.                     ║
          ║ ⚠️  Consider fixing issues or proceed with caution.                                 ║
          {% else %}
          ║ ❌ Multiple critical issues found. DO NOT proceed with upgrade.                     ║
          ║ ❌ Fix all critical issues before attempting upgrade.                               ║
          {% endif %}
          ╚══════════════════════════════════════════════════════════════════════════════════════╝

    - name: Save readiness report to file
      ansible.builtin.copy:
        content: |
          RKE2 Upgrade Readiness Report
          Generated: {{ validation_summary.timestamp }}
          Target Version: {{ rke2_version | default('undefined') }}
          Readiness Score: {{ total_score }}/{{ max_score }} ({{ (total_score | int / max_score | int * 100) | round(1) }}%)

          Readiness Checks:
          {% for check in readiness_checks %}
          - {{ check.name }}: {{ 'PASS' if check.status else 'FAIL' }} ({{ check.weight }}pts)
          {% endfor %}

          Bastion Host:
          - Internet Access: {{ 'Available' if validation_summary.bastion.internet_access else 'Not Available' }}
          - Disk Space: {{ validation_summary.bastion.disk_space }}
          - SSH Connectivity: {{ validation_summary.bastion.ssh_connectivity }}/{{ groups[target_group] | length }}

          Cluster Nodes:
          {% for node in groups[target_group] %}
          {{ node }}:
            - RKE2 Installed: {{ 'Yes' if (hostvars[node]['rke2_binary'] is defined and hostvars[node]['rke2_binary']['stat']['exists']) else 'No' }}
          {% if hostvars[node]['rke2_binary'] is defined and hostvars[node]['rke2_binary']['stat']['exists'] %}
            - Current Version: {{ hostvars[node]['current_rke2_version']['stdout'] | default('unknown') }}
            - Service Status: {{ hostvars[node]['rke2_service_status']['status']['ActiveState'] | default('unknown') }}
          {% endif %}
            - Disk Usage: {{ hostvars[node]['disk_usage_percent'] | default('unknown') }}%
            - Memory Usage: {{ hostvars[node]['memory_usage']['stdout'] | default('unknown') }}
          {% endfor %}
        dest: "./rke2-upgrade-readiness-{{ ansible_date_time.epoch | default(ansible_date_time.iso8601 | default('unknown')) }}.txt"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      delegate_to: localhost

    - name: Final recommendation
      ansible.builtin.fail:
        msg: |
          [FAILED] UPGRADE NOT RECOMMENDED
          Readiness score: {{ total_score }}/{{ max_score }} ({{ (total_score | int / max_score | int * 100) | round(1) }}%)
          Please fix the failed checks before proceeding with the upgrade.
      when: total_score | int < (max_score | int * 0.8)

    - name: Upgrade ready confirmation
      ansible.builtin.debug:
        msg: |
          [OK] UPGRADE READY
          Readiness score: {{ total_score }}/{{ max_score }} ({{ (total_score | int / max_score | int * 100) | round(1) }}%)
          You can proceed with the upgrade using:
          ansible-playbook -i inventory/inventory.yml playbooks/rke2-upgrade-playbook.yml
      when: total_score | int >= (max_score | int * 0.8)
