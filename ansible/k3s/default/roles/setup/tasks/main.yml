---
- name: Check python3
  raw: |
    set -e
    if command -v python3 >/dev/null 2>&1; then
      python3 -c 'import sys, json; print(json.dumps({"major": sys.version_info.major, "minor": sys.version_info.minor, "path": sys.executable}))'
    else
      echo MISSING
    fi
  register: pyprobe
  changed_when: false

- name: Parse python3 results
  set_fact:
    _py_missing: "{{ 'MISSING' in pyprobe.stdout }}"
    _py_info: "{{ (pyprobe.stdout is search('^{')) | ternary(pyprobe.stdout | from_json, {}) }}"

- name: Parse py_info fact
  set_fact:
    _py_major: "{{ _py_info.major | default(0) | int }}"
    _py_minor: "{{ _py_info.minor | default(0) | int }}"

- name: Detect OS family
  raw: |
    . /etc/os-release
    echo "${ID}|${ID_LIKE}|${VERSION_ID}"
  register: osr
  changed_when: false

- name: Set OS facts
  set_fact:
    _os_id:   "{{ (osr.stdout | default('||')).split('|')[0] | lower }}"
    _os_like: "{{ (osr.stdout | default('||')).split('|')[1] | lower }}"
    _os_ver:  "{{ (osr.stdout | default('||')).split('|')[2] }}"

- name: Debian/Ubuntu | Ensure Python3 (>=3.8) is installed
  raw: >
    bash -c "set -e;
    export DEBIAN_FRONTEND=noninteractive;
    apt-get update;
    apt-get install -y python3"
  when: >
    _os_id in ['debian','ubuntu'] and
    (_py_missing or
    (_py_major | int < 3) or
    (_py_major | int == 3 and _py_minor | int < 8))

- name: RHEL-family | ensure python39 (or python3)
  raw: |
    set -e
    if command -v dnf >/dev/null 2>&1; then
      dnf -y module enable python39 || true
      dnf -y install python39 || dnf -y install python3
    else
      yum -y install python39 || yum -y install python3
    fi
  when: (_os_id in ['rhel','centos','rocky','almalinux','ol'] or 'rhel' in _os_like)
        and (_py_missing or (_py_major < 3) or (_py_major == 3 and _py_minor < 8))

- name: SUSE/SLES | ensure python311
  raw: |
    set -e
    zypper -n refresh || true
    zypper -n install -y python311 || true
  when: (_os_id in ['sles','suse','opensuse-leap','opensuse'] or 'suse' in _os_like)
        and (_py_missing or (_py_major < 3) or (_py_major == 3 and _py_minor < 8))

- name: Discover best Python interpreter path
  raw: |
    for p in /usr/bin/python3.12 /usr/bin/python3.11 /usr/bin/python311 /usr/bin/python3.10 /usr/bin/python3.9 /usr/bin/python39; do
      if [ -x "$p" ]; then
        echo "$p"
        exit 0
      fi
    done
    if [ -x /usr/bin/python3 ]; then
      echo /usr/bin/python3
      exit 0
    fi
    echo /usr/bin/python3
  register: pywhich
  changed_when: false

- name: Bind Ansible to the discovered interpreter
  set_fact:
    ansible_python_interpreter: "{{ pywhich.stdout | trim }}"

- name: Reset SSH connection to apply interpreter
  meta: reset_connection

# --- NetworkManager prep (RHEL/OL 8+) ---
- name: Disable NetworkManager cloud setup services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
    masked: false
  loop:
    - nm-cloud-setup.service
    - nm-cloud-setup.timer
  when:
    - _os_id in ['rhel','centos','rocky','almalinux','ol'] or 'rhel' in _os_like
    - (_os_ver | default('0')) is match('^([8-9]|1[0-9])')

- name: Ensure CNI interfaces are unmanaged by NetworkManager
  ansible.builtin.copy:
    dest: /etc/NetworkManager/conf.d/99-cni.conf
    mode: "0644"
    owner: root
    group: root
    content: |
      [keyfile]
      unmanaged-devices=interface-name:cali*;interface-name:tunl*;interface-name:vxlan.calico;interface-name:flannel*
  when: _os_id in ['rhel','centos','rocky','almalinux','ol'] or 'rhel' in _os_like

- name: Reload NetworkManager to pick up conf changes
  ansible.builtin.systemd:
    name: NetworkManager
    state: restarted
  when: _os_id in ['rhel','centos','rocky','almalinux','ol'] or 'rhel' in _os_like