---
- name: Validate input parameters
  assert:
    that:
      - kubernetes_version is regex('^[a-zA-Z0-9.+_-]+$')
      - k3s_channel is match("^(stable|testing|latest|v\\d+(\\.\\d+){0,2})$")  
    fail_msg: "Invalid k3s_channel '{{ k3s_channel }}'. Must be stable, testing, latest, or v1[.x][.y]"

- name: Create K3s directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /etc/rancher/k3s
    - /var/lib/rancher/k3s/server/logs

- name: Generate K3s configuration from template
  template:
    src: k3s-config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    mode: '0644'
    backup: true

- name: Check if k3s_registry.yaml exists in role files
  ansible.builtin.stat:
    path: "{{ role_path }}/tasks/k3s_registry.yaml"
  register: registry_file

- name: Ensure destination directory for registry exists
  ansible.builtin.file:
    path: /etc/rancher/k3s/
    state: directory
    mode: '0755'
  when: registry_file.stat.exists

- name: Copy k3s_registry.yaml to the registry filepath
  ansible.builtin.copy:
    src: k3s_registry.yaml
    mode: '0644'
    dest: /etc/rancher/k3s/registries.yaml


- name: Download and install K3s
  shell: |
    # Skip installation if K3s is already installed
    if [ -f /usr/local/bin/k3s ]; then
      echo "K3s already installed, skipping"
      exit 0
    fi
    
    # Set installation variables - detect if version is a commit hash or version tag
    VERSION="{{ kubernetes_version }}"
    if [[ "$VERSION" =~ ^[0-9a-f]{40}$ ]]; then
      echo "Installing K3s from commit: $VERSION"
      export INSTALL_K3S_COMMIT="$VERSION"
    else
      echo "Installing K3s version: $VERSION"
      export INSTALL_K3S_VERSION="$VERSION"
    fi
    
    {% if k3s_channel is defined and k3s_channel != '' %}
    export INSTALL_K3S_CHANNEL="{{ k3s_channel }}"
    {% endif %}
    {% if k3s_node_type == 'agent' %}
    export INSTALL_K3S_EXEC="agent"
    {% endif %}
    export INSTALL_K3S_SKIP_START="true"
    
    # Download and install K3s
    curl -sfL https://get.k3s.io | sh -
  register: k3s_install_result
  changed_when: "'K3s already installed' not in k3s_install_result.stdout"
  args:
    executable: bash

- name: Enable and start K3s service
  block:
    - name: Enable and start K3s service
      systemd:
        name: "{{ 'k3s-agent' if k3s_node_type == 'agent' else 'k3s' }}"
        state: "{{ k3s_service_state | default('started') }}"
        enabled: "{{ k3s_service_enabled | default(true) }}"
        daemon_reload: true

    - name: Wait for K3s service to be ready
      wait_for:
        port: "{{ 6443 if k3s_node_type in ['cluster-init', 'server'] else 10250 }}"
        host: "127.0.0.1"
        timeout: 300
      when: (k3s_service_state | default('started')) == 'started'

  rescue:
    - name: Display K3s debugging information
      debug:
        msg: |
          K3s Service Debugging Information:
          Service: {{ 'k3s-agent' if k3s_node_type == 'agent' else 'k3s' }}
          Status: {{ ansible_facts.services[('k3s-agent' if k3s_node_type == 'agent' else 'k3s')].state | default('unknown') }}
          
    - name: Verify K3s service health
      systemd:
        name: "{{ 'k3s' if k3s_node_type != 'agent' else 'k3s-agent' }}"
      register: service_status
      
    - name: Wait for node readiness
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Node
        name: "{{ inventory_hostname }}"
      until: node_status.resources[0].status.conditions[0].type == "Ready"

    - name: Get service logs
      shell: journalctl -u {{ 'k3s-agent' if k3s_node_type == 'agent' else 'k3s' }} --no-pager -n 50
      register: service_logs
      
    - name: Display service logs
      debug:
        var: service_logs.stdout_lines
        
    - name: Fail with detailed error information
      fail:
        msg: |
          K3s service failed to start.
          Service: {{ 'k3s-agent' if k3s_node_type == 'agent' else 'k3s' }}
          Status: {{ service_status.status.ActiveState | default('unknown') }}

- name: Set kubeconfig server address (cluster-init only)
  lineinfile:
    path: /etc/rancher/k3s/k3s.yaml
    regexp: '^\s*server:\s*.*$'
    line: "    server: https://{{ k3s_fqdn | default(k3s_api_host, true) }}:6443"
    backrefs: false
  when:
    - k3s_node_type == 'cluster-init'

- name: Check K3s installation
  command: /usr/local/bin/k3s --version
  register: k3s_version_output
  changed_when: false
  failed_when: k3s_version_output.rc != 0

- name: Show K3s installation success
  debug:
    msg: |
      Version: {{ k3s_version_output.stdout.split('\n')[0] }}
      Node Type: {{ k3s_node_type }}
      Service: {{ 'k3s-agent' if k3s_node_type == 'agent' else 'k3s' }}

