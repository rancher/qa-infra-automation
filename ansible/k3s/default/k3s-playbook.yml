---
- hosts: "localhost"
  connection: local
  gather_facts: false
  vars_files:
    - vars.yaml
  vars:
    terraform_workspace: "{{ lookup('env', 'TF_WORKSPACE') }}"
    # Construct the path to the workspace's state file
    terraform_state_path: "{{ lookup('env', 'TERRAFORM_NODE_SOURCE') | default('tofu/aws/modules/cluster_nodes') }}"
    terraform_state_file: "{{ terraform_state_path }}/terraform.tfstate.d/{{ terraform_workspace }}/terraform.tfstate"
    # Use the constructed path in the lookups
    kube_api_host: "{{ lookup('cloud.terraform.tf_output', 'kube_api_host', state_file=terraform_state_file) }}"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  tasks:

    - name: Wait for SSH on node
      wait_for:
        host: "{{ kube_api_host }}"
        port: 22
        timeout: 120
        state: started
- hosts: "master"
  become: true
  gather_facts: false
  vars_files:
    - vars.yaml
  vars:
    # Get the current Terraform workspace name
    terraform_workspace: "{{ lookup('env', 'TF_WORKSPACE') }}"
    # Construct the path to the workspace's state file
    terraform_state_path: "{{ lookup('env', 'TERRAFORM_NODE_SOURCE') | default('tofu/aws/modules/cluster_nodes') }}"
    terraform_state_file: "{{ terraform_state_path }}/terraform.tfstate.d/{{ terraform_workspace }}/terraform.tfstate"

    # Use the constructed path in the lookups
    kube_api_host: "{{ lookup('cloud.terraform.tf_output', 'kube_api_host', state_file=terraform_state_file) }}"
    fqdn: "{{ lookup('cloud.terraform.tf_output', 'fqdn', state_file=terraform_state_file) }}"
    node_token_file: "/tmp/node_token.txt" # Local file to store the token
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  tasks:
    - name: Transfer and execute init-cluster.sh (initial etcd node)
      script: ./init-cluster.sh
      environment:
        KUBERNETES_VERSION: "{{ kubernetes_version }}"
        KUBE_API_HOST: "{{ kube_api_host }}"
        FQDN: "{{ fqdn }}"
        NODE_ROLE: "{{ ansible_role }}"
        PUBLIC_IP: "{{ ansible_host }}" 
        SERVER_FLAGS: "{{ server_flags | default('') }}"
        CHANNEL: "{{ channel | default('') }}"
      register: script_result

    - name: Display script output (stdout)
      debug:
        var: script_result.stdout_lines

    - name: Check script return code
      debug:
        msg: "Script returned: {{ script_result.rc }}"

    - name: Display script errors (stderr) if any
      debug:
        var: script_result.stderr_lines
      when: script_result.rc != 0

    - name: Get node-token from master
      raw: cat /var/lib/rancher/k3s/server/node-token
      register: node_token_output

    - name: Save node_token to local file
      delegate_to: localhost
      run_once: true
      become: no
      shell: echo "{{ node_token_output.stdout }}" > "{{ node_token_file }}"

    - name: Read file contents into a variable
      raw: cat /etc/rancher/k3s/k3s.yaml
      register: file_contents

    - name: Save file contents locally
      delegate_to: localhost
      run_once: true
      become: no
      shell: echo "{{ file_contents.stdout }}" > "{{ kubeconfig_file }}"

- hosts: "all"
  become: true
  gather_facts: false
  vars_files:
    - vars.yaml
  vars:
    # Get the current Terraform workspace name
    terraform_workspace: "{{ lookup('env', 'TF_WORKSPACE') }}"
    # Construct the path to the workspace's state file
    terraform_state_path: "{{ lookup('env', 'TERRAFORM_NODE_SOURCE') | default('tofu/aws/modules/cluster_nodes') }}"
    terraform_state_file: "{{ terraform_state_path }}/terraform.tfstate.d/{{ terraform_workspace }}/terraform.tfstate"
    # Use the constructed path in the lookups
    kube_api_host: "{{ lookup('cloud.terraform.tf_output', 'kube_api_host', state_file=terraform_state_file) }}"
    fqdn: "{{ lookup('cloud.terraform.tf_output', 'fqdn', state_file=terraform_state_file) }}"
    server_host: "{{ (groups['all'] | selectattr('terraform_facts.output_nodes.value[inventory_hostname].is_server', 'defined') | selectattr('terraform_facts.output_nodes.value[inventory_hostname].is_server', 'true') | map('inventory_hostname') | list)[0] }}"
    node_token_file: "/tmp/node_token.txt" # Local file to store the token"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
  tasks:
    - name: Read node_token from local file
      delegate_to: localhost
      run_once: true
      become: false
      slurp:
        src: "{{ node_token_file }}"
      register: node_token_file_content

    - name: Set node_token fact from file content
      set_fact:
        node_token: "{{ node_token_file_content.content | b64decode | trim }}"
      run_once: true
      delegate_to: localhost

    - name: Transfer and execute init-server.sh (Server)
      script: ./init-server.sh
      environment:
        KUBERNETES_VERSION: "{{ kubernetes_version }}"
        KUBE_API_HOST: "{{ kube_api_host }}"
        FQDN: "{{ fqdn }}"
        NODE_TOKEN: "{{ node_token }}"
        NODE_ROLE: "{{ ansible_role }}"
        PUBLIC_IP: "{{ ansible_host }}"
        SERVER_FLAGS: "{{ server_flags | default('') }}"
        CHANNEL: "{{ channel | default('v1') }}"
      register: script_result
      when: 'inventory_hostname != "master" and ("cp" in ansible_role or "etcd" in ansible_role)'

    - name: Transfer and execute init-agent.sh (Agent)
      script: ./init-agent.sh
      environment:
        KUBERNETES_VERSION: "{{ kubernetes_version }}"
        KUBE_API_HOST: "{{ kube_api_host }}"
        FQDN: "{{ fqdn }}"
        NODE_TOKEN: "{{ node_token }}"
        PUBLIC_IP: "{{ ansible_host }}"
        WORKER_FLAGS: "{{ worker_flags | default('') }}"
        CHANNEL: "{{ channel | default('v1') }}"
      register: script_result
      when: ansible_role == "worker"

- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - vars.yaml
  tasks:
    - name: Wait until all K3s system pods are Running or Succeeded
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_file }}"
        api_version: v1
        kind: Pod
        namespace: kube-system
      register: k3s_pods_check
      until: >
        k3s_pods_check.resources is defined and
        (k3s_pods_check.resources | rejectattr('status.phase', 'in', ['Running', 'Succeeded']) | list | length == 0)
      retries: 5
      delay: 60
