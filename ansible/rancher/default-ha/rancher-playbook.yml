---
- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - vars.yaml # Assuming this file contains rancher_version and cert_manager_version
  vars:
    # Get the current Terraform workspace name
    terraform_workspace: "{{ lookup('env', 'TF_WORKSPACE') }}"
    # Construct the path to the workspace's state file
    terraform_state_path: "{{ lookup('env', 'TERRAFORM_NODE_SOURCE') | default('tofu/aws/modules/cluster_nodes') }}"
    terraform_state_file: "{{ terraform_state_path }}/terraform.tfstate.d/{{ terraform_workspace }}/terraform.tfstate"
    fqdn: "{{ lookup('cloud.terraform.tf_output', 'fqdn', state_file=terraform_state_file) }}"
    # Use default values if not defined in vars.yaml
    rancher_chart_repo_default: "rancher-latest"
    rancher_chart_repo_final: "{{ rancher_chart_repo | default(rancher_chart_repo_default) }}"
    rancher_chart_repo_url_default: "https://releases.rancher.com/server-charts/latest"
    rancher_chart_repo_url_final: "{{ rancher_chart_repo_url | default(rancher_chart_repo_url_default) }}"

  tasks:
    - name: Check if kubeconfig file exists
      stat:
        path: "{{ kubeconfig_file }}"
      register: kubeconfig_file_stat

    - name: Fail if kubeconfig file does not exist
      fail:
        msg: "kubeconfig file '{{ kubeconfig_file }}' does not exist."
      when: not kubeconfig_file_stat.stat.exists

    - name: Try to connect to Kubernetes cluster by listing namespaces
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_file }}"
        api_version: v1
        kind: Namespace
      register: ns_info
      until: ns_info.resources is defined
      retries: 5
      delay: 15

    - name: Show connection result
      debug:
        msg: "Connected! Found {{ ns_info.resources | length }} namespaces."

    - name: Install cert-manager CRDs
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_file }}"
        src: https://github.com/cert-manager/cert-manager/releases/download/v{{ cert_manager_version }}/cert-manager.crds.yaml
        state: present
      when: cert_manager_version != ""

    - name: Install cert-manager
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_file }}"
        src: https://github.com/cert-manager/cert-manager/releases/download/v{{ cert_manager_version }}/cert-manager.yaml
        state: present
        wait: true
        wait_timeout: 300
      when: cert_manager_version != ""

    - name: Wait for cert-manager to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_file }}"
        api_version: apps/v1
        kind: Deployment
        namespace: cert-manager
        name: cert-manager
      register: cert_manager_deployment
      until: cert_manager_deployment.resources[0].status.readyReplicas == cert_manager_deployment.resources[0].status.replicas
      retries: 10
      delay: 30
      when: cert_manager_version != ""

    - name: Get all nodes
      k8s_info:
        api_version: v1
        kubeconfig: "{{ kubeconfig_file }}"
        kind: Node
        label_selectors:
          - "node-role.kubernetes.io/etcd=true"
      register: node_info

    - name: Add Rancher Helm repository
      kubernetes.core.helm_repository:
        kubeconfig: "{{ kubeconfig_file }}"
        name: "{{ rancher_chart_repo_final }}"
        repo_url: "{{ rancher_chart_repo_url_final }}"
      when: rancher_version != ""

    - name: Install Rancher
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_file }}"
        name: rancher
        chart_ref: "{{ rancher_chart_repo_final }}/rancher"
        release_namespace: cattle-system
        create_namespace: true
        chart_version: "{{ rancher_version }}"
        wait: true
        wait_timeout: "800s"
        values:
          hostname: "{{ fqdn }}"
          bootstrapPassword: "{{ bootstrap_password }}"
          rancherImageTag: "{{ rancher_image_tag | default(omit) }}"
          replicas: "{{ node_info.resources | length }}"
      when: rancher_version != ""
      retries: 6
      delay: 60

    - name: Wait for Rancher to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_file }}"
        api_version: apps/v1
        kind: Deployment
        namespace: cattle-system
        name: rancher
      register: rancher_deployment
      until: rancher_deployment.resources[0].status.readyReplicas is defined and rancher_deployment.resources[0].status.readyReplicas == rancher_deployment.resources[0].status.replicas
      retries: 15
      delay: 30
      when: rancher_version != ""

    - name: Get Rancher Ingress Host
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_file }}"
        api_version: networking.k8s.io/v1
        kind: Ingress
        namespace: cattle-system
        name: rancher
      register: rancher_ingress
      when: rancher_version != ""

    - name: Wait for Rancher UI
      uri:
        url: "https://{{ fqdn }}"
        method: GET
        status_code: 200
        validate_certs: false
      register: webpage_result
      retries: 30
      delay: 10
      until: webpage_result.status == 200

    - name: Display Rancher URL
      debug:
        msg: "Rancher URL: https://{{ rancher_ingress.resources[0].spec.rules[0].host }}"
      when: rancher_version != "" and rancher_ingress.resources|length > 0 and rancher_ingress.resources[0].spec.rules|length > 0 and rancher_ingress.resources[0].spec.rules[0].host is defined

    - name: Get Rancher UserID and Token
      ansible.builtin.uri:
        url: "https://{{ fqdn }}/v3-public/localproviders/local?action=login"
        body:
          username: admin
          password: "{{ bootstrap_password }}"
        method: POST
        force_basic_auth: true
        validate_certs: false
        status_code: 201
        body_format: json
      register: rancherjson
      retries: 5
      delay: 10
      until: rancherjson.status == 201
      when: rancher_version != ""

    - name: Extract Rancher UserID and Token
      set_fact:
        rancher_user_id: "{{ rancherjson.json.userId }}"
        API_KEY: "{{ rancherjson.json.token }}"
      when: rancher_version != ""

    - name: Set Rancher Password
      ansible.builtin.uri:
        url: "https://{{ fqdn }}/v3/users/{{ rancher_user_id }}?action=setpassword"
        method: POST
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
          Authorization: "Bearer {{ API_KEY }}"
        body: 
          newPassword: "{{ password }}"
        body_format: json
        force_basic_auth: true
        validate_certs: false
        status_code: 200
      register: set_password_result
      retries: 5
      delay: 10
      until: set_password_result.status == 200
      when: rancher_version != ""

    - name: Set Rancher Server URL
      ansible.builtin.uri:
        url: "https://{{ fqdn }}/v3/settings/server-url"
        method: PUT
        headers:
          Accept: "application/json"
          Content-Type: "application/json"
          Authorization: "Bearer {{ API_KEY }}"
        body: 
          name: "server-url"
          value: "https://{{ fqdn }}"
        body_format: json
        force_basic_auth: true
        validate_certs: false
        status_code: 200
      register: set_server_url_result
      retries: 5
      delay: 10
      until: set_server_url_result.status == 200
      when: rancher_version != ""
    
    - name: Print Token
      debug:
        msg: "RANCHER_API_KEY: {{ API_KEY }}"

    - name: Write multiple variables to file
      copy:
        dest: generated.tfvars
        content: |
          fqdn = "https://{{ fqdn }}"
          api_key = "{{ API_KEY }}"